import{_ as t,c as d,o as a,ae as r}from"./chunks/framework.C4y2S-A3.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"api/Object2D.md","filePath":"api/Object2D.md"}'),o={name:"api/Object2D.md"};function n(i,e,s,c,l,h){return a(),d("div",null,[...e[0]||(e[0]=[r('<h2 id="classes" tabindex="-1">Classes <a class="header-anchor" href="#classes" aria-label="Permalink to &quot;Classes&quot;">​</a></h2><dl><dt><a href="#Object2D">Object2D</a></dt><dd><p>This class serves as a base for all 2D objects, providing a transform property.</p></dd></dl><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><dl><dt><a href="#setUserData">setUserData(userData)</a> ⇒ <code>void</code></dt><dd><p>Sets the userData property reserved for custom user data</p></dd><dt><a href="#setVisible">setVisible(visible)</a> ⇒ <code>void</code></dt><dd><p>Sets the visibility of the object</p></dd><dt><a href="#setZIndex">setZIndex(zIndex)</a> ⇒ <code>void</code></dt><dd><p>Sets the z-index of the object for rendering order</p></dd><dt><a href="#draw">draw(renderer)</a> ⇒ <code>void</code></dt><dd><p>Renders the light effect on the given 2D rendering context.</p></dd><dt><a href="#drawContext2D">drawContext2D(ctx)</a> ⇒ <code>void</code></dt><dd><p>Renders the light effect on the given 2D rendering context.</p></dd></dl><p><a name="Object2D"></a></p><h2 id="object2d" tabindex="-1">Object2D <a class="header-anchor" href="#object2d" aria-label="Permalink to &quot;Object2D&quot;">​</a></h2><p>This class serves as a base for all 2D objects, providing a transform property.</p><p><strong>Kind</strong>: global class<br><a name="Object2D+Object2D"></a></p><h3 id="object2d-object2d" tabindex="-1">object2D.Object2D <a class="header-anchor" href="#object2d-object2d" aria-label="Permalink to &quot;object2D.Object2D&quot;">​</a></h3><p><strong>Kind</strong>: instance class of <a href="#Object2D"><code>Object2D</code></a><br><a name="setUserData"></a></p><h2 id="setuserdata-userdata-⇒-void" tabindex="-1">setUserData(userData) ⇒ <code>void</code> <a class="header-anchor" href="#setuserdata-userdata-⇒-void" aria-label="Permalink to &quot;setUserData(userData) ⇒ &lt;code&gt;void&lt;/code&gt;&quot;">​</a></h2><p>Sets the userData property reserved for custom user data</p><p><strong>Kind</strong>: global function</p><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>userData</td><td><code>object</code></td><td>the userData object</td></tr></tbody></table><p><a name="setVisible"></a></p><h2 id="setvisible-visible-⇒-void" tabindex="-1">setVisible(visible) ⇒ <code>void</code> <a class="header-anchor" href="#setvisible-visible-⇒-void" aria-label="Permalink to &quot;setVisible(visible) ⇒ &lt;code&gt;void&lt;/code&gt;&quot;">​</a></h2><p>Sets the visibility of the object</p><p><strong>Kind</strong>: global function<br><strong>Throws</strong>:</p><ul><li>Will throw an error if visible is not a boolean</li></ul><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>visible</td><td><code>boolean</code></td><td>Whether the object should be visible</td></tr></tbody></table><p><a name="setZIndex"></a></p><h2 id="setzindex-zindex-⇒-void" tabindex="-1">setZIndex(zIndex) ⇒ <code>void</code> <a class="header-anchor" href="#setzindex-zindex-⇒-void" aria-label="Permalink to &quot;setZIndex(zIndex) ⇒ &lt;code&gt;void&lt;/code&gt;&quot;">​</a></h2><p>Sets the z-index of the object for rendering order</p><p><strong>Kind</strong>: global function<br><strong>Throws</strong>:</p><ul><li>Will throw an error if zIndex is not a number</li></ul><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>zIndex</td><td><code>number</code></td><td>The z-index value</td></tr></tbody></table><p><a name="draw"></a></p><h2 id="draw-renderer-⇒-void" tabindex="-1">draw(renderer) ⇒ <code>void</code> <a class="header-anchor" href="#draw-renderer-⇒-void" aria-label="Permalink to &quot;draw(renderer) ⇒ &lt;code&gt;void&lt;/code&gt;&quot;">​</a></h2><p>Renders the light effect on the given 2D rendering context.</p><p><strong>Kind</strong>: global function<br><strong>Throws</strong>:</p><ul><li>Will throw an error if the renderer.context is not supported</li></ul><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>renderer</td><td><code>Renderer</code></td><td>The selected renderer</td></tr></tbody></table><p><a name="drawContext2D"></a></p><h2 id="drawcontext2d-ctx-⇒-void" tabindex="-1">drawContext2D(ctx) ⇒ <code>void</code> <a class="header-anchor" href="#drawcontext2d-ctx-⇒-void" aria-label="Permalink to &quot;drawContext2D(ctx) ⇒ &lt;code&gt;void&lt;/code&gt;&quot;">​</a></h2><p>Renders the light effect on the given 2D rendering context.</p><p><strong>Kind</strong>: global function</p><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>ctx</td><td><code>CanvasRenderingContext2D</code></td><td>The 2D rendering context.</td></tr></tbody></table>',37)])])}const u=t(o,[["render",n]]);export{p as __pageData,u as default};
