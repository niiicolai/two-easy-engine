import{_ as t,c as r,o as d,ae as a}from"./chunks/framework.C4y2S-A3.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"api/Renderer2D.md","filePath":"api/Renderer2D.md"}'),n={name:"api/Renderer2D.md"};function o(i,e,c,s,l,h){return d(),r("div",null,[...e[0]||(e[0]=[a('<h2 id="classes" tabindex="-1">Classes <a class="header-anchor" href="#classes" aria-label="Permalink to &quot;Classes&quot;">​</a></h2><dl><dt><a href="#Renderer2D">Renderer2D</a> ⇐ <code>Renderer</code></dt><dd><p>This class handles the rendering process, including setting up the canvas and drawing the scene using the camera.</p></dd></dl><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><dl><dt><a href="#initContext">initContext()</a></dt><dd><p>Init the rendering context</p></dd><dt><a href="#recalculateDevicePixelRatio">recalculateDevicePixelRatio()</a> ⇒ <code>void</code></dt><dd><p>Recalculates the canvas size based on the device pixel ratio</p></dd><dt><a href="#render">render()</a> ⇒ <code>void</code></dt><dd><p>Trigger a new render</p></dd></dl><p><a name="Renderer2D"></a></p><h2 id="renderer2d-⇐-renderer" tabindex="-1">Renderer2D ⇐ <code>Renderer</code> <a class="header-anchor" href="#renderer2d-⇐-renderer" aria-label="Permalink to &quot;Renderer2D ⇐ &lt;code&gt;Renderer&lt;/code&gt;&quot;">​</a></h2><p>This class handles the rendering process, including setting up the canvas and drawing the scene using the camera.</p><p><strong>Kind</strong>: global class<br><strong>Extends</strong>: <code>Renderer</code></p><ul><li><a href="#Renderer2D">Renderer2D</a> ⇐ <code>Renderer</code><ul><li><a href="#Renderer2D+Renderer2D">.Renderer2D</a><ul><li><a href="#new_Renderer2D+Renderer2D_new">new exports.Renderer2D(canvas, scene, camera, [options])</a></li></ul></li></ul></li></ul><p><a name="Renderer2D+Renderer2D"></a></p><h3 id="renderer2d-renderer2d" tabindex="-1">renderer2D.Renderer2D <a class="header-anchor" href="#renderer2d-renderer2d" aria-label="Permalink to &quot;renderer2D.Renderer2D&quot;">​</a></h3><p><strong>Kind</strong>: instance class of <a href="#Renderer2D"><code>Renderer2D</code></a><br><a name="new_Renderer2D+Renderer2D_new"></a></p><h4 id="new-exports-renderer2d-canvas-scene-camera-options" tabindex="-1">new exports.Renderer2D(canvas, scene, camera, [options]) <a class="header-anchor" href="#new-exports-renderer2d-canvas-scene-camera-options" aria-label="Permalink to &quot;new exports.Renderer2D(canvas, scene, camera, [options])&quot;">​</a></h4><p><strong>Throws</strong>:</p><ul><li><code>Error</code> If canvas is not of type HTMLCanvasElement</li><li><code>Error</code> If scene is not of type Scene</li><li><code>Error</code> If camera is not of type Camera2D</li><li><code>Error</code> If options.width or options.height is not a number</li><li><code>Error</code> If options.devicePixelRatio is not a number</li><li><code>Error</code> If options.backgroundColor is not a string or Color</li></ul><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>canvas</td><td><code>HTMLCanvasElement</code></td><td></td><td>The canvas element</td></tr><tr><td>scene</td><td><code>Scene</code></td><td></td><td>The scene</td></tr><tr><td>camera</td><td><code>Camera2D</code></td><td></td><td>The camera</td></tr><tr><td>[options]</td><td><code>Object</code></td><td></td><td>Render configuration options.</td></tr><tr><td>[options.width]</td><td><code>number</code></td><td><code>window.innerWidth</code></td><td>Initial canvas width</td></tr><tr><td>[options.height]</td><td><code>number</code></td><td><code>window.innerHeight</code></td><td>Initial canvas height</td></tr><tr><td>[options.devicePixelRatio]</td><td><code>number</code></td><td><code>window.devicePixelRatio</code></td><td>Initial device pixel ratio</td></tr><tr><td>[options.backgroundColor]</td><td><code>string</code> | <code>Color</code></td><td><code>&quot;&#39;transparent&#39;&quot;</code></td><td>Initial background color</td></tr></tbody></table><p><a name="initContext"></a></p><h2 id="initcontext" tabindex="-1">initContext() <a class="header-anchor" href="#initcontext" aria-label="Permalink to &quot;initContext()&quot;">​</a></h2><p>Init the rendering context</p><p><strong>Kind</strong>: global function<br><a name="recalculateDevicePixelRatio"></a></p><h2 id="recalculatedevicepixelratio-⇒-void" tabindex="-1">recalculateDevicePixelRatio() ⇒ <code>void</code> <a class="header-anchor" href="#recalculatedevicepixelratio-⇒-void" aria-label="Permalink to &quot;recalculateDevicePixelRatio() ⇒ &lt;code&gt;void&lt;/code&gt;&quot;">​</a></h2><p>Recalculates the canvas size based on the device pixel ratio</p><p><strong>Kind</strong>: global function<br><a name="render"></a></p><h2 id="render-⇒-void" tabindex="-1">render() ⇒ <code>void</code> <a class="header-anchor" href="#render-⇒-void" aria-label="Permalink to &quot;render() ⇒ &lt;code&gt;void&lt;/code&gt;&quot;">​</a></h2><p>Trigger a new render</p><p><strong>Kind</strong>: global function</p>',26)])])}const g=t(n,[["render",o]]);export{u as __pageData,g as default};
