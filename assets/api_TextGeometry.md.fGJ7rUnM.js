import{_ as e,c as o,o as d,ae as r}from"./chunks/framework.C4y2S-A3.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"api/TextGeometry.md","filePath":"api/TextGeometry.md"}'),a={name:"api/TextGeometry.md"};function n(c,t,i,l,s,m){return d(),o("div",null,[...t[0]||(t[0]=[r('<h2 id="classes" tabindex="-1">Classes <a class="header-anchor" href="#classes" aria-label="Permalink to &quot;Classes&quot;">​</a></h2><dl><dt><a href="#TextGeometry">TextGeometry</a> ⇐ <code>Geometry</code></dt><dd><p>This class provides functionality for creating and managing text-based geometry.</p></dd></dl><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><dl><dt><a href="#drawContext2D">drawContext2D(ctx, transform, material)</a> ⇒ <code>void</code></dt><dd><p>Draws the text onto the given canvas 2D context</p></dd></dl><p><a name="TextGeometry"></a></p><h2 id="textgeometry-⇐-geometry" tabindex="-1">TextGeometry ⇐ <code>Geometry</code> <a class="header-anchor" href="#textgeometry-⇐-geometry" aria-label="Permalink to &quot;TextGeometry ⇐ &lt;code&gt;Geometry&lt;/code&gt;&quot;">​</a></h2><p>This class provides functionality for creating and managing text-based geometry.</p><p><strong>Kind</strong>: global class<br><strong>Extends</strong>: <code>Geometry</code></p><ul><li><a href="#TextGeometry">TextGeometry</a> ⇐ <code>Geometry</code><ul><li><a href="#TextGeometry+TextGeometry">.TextGeometry</a><ul><li><a href="#new_TextGeometry+TextGeometry_new">new exports.TextGeometry(text, [options])</a></li></ul></li></ul></li></ul><p><a name="TextGeometry+TextGeometry"></a></p><h3 id="textgeometry-textgeometry" tabindex="-1">textGeometry.TextGeometry <a class="header-anchor" href="#textgeometry-textgeometry" aria-label="Permalink to &quot;textGeometry.TextGeometry&quot;">​</a></h3><p><strong>Kind</strong>: instance class of <a href="#TextGeometry"><code>TextGeometry</code></a><br><a name="new_TextGeometry+TextGeometry_new"></a></p><h4 id="new-exports-textgeometry-text-options" tabindex="-1">new exports.TextGeometry(text, [options]) <a class="header-anchor" href="#new-exports-textgeometry-text-options" aria-label="Permalink to &quot;new exports.TextGeometry(text, [options])&quot;">​</a></h4><p><strong>Throws</strong>:</p><ul><li><code>Error</code> If text is not a string.</li><li><code>Error</code> If maxWidth is not a positive number.</li><li><code>Error</code> If font is not a string.</li><li><code>Error</code> If textAlign is not a valid alignment keyword.</li><li><code>Error</code> If textBaseline is not a valid baseline keyword.</li><li><code>Error</code> If direction is not a valid direction keyword.</li></ul><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>text</td><td><code>string</code></td><td></td><td>The text content to generate geometry for.</td></tr><tr><td>[options]</td><td><code>Object</code></td><td></td><td>The geometry options.</td></tr><tr><td>[options.maxWidth]</td><td><code>number</code> | <code>null</code></td><td><code></code></td><td>The maximum width allowed for the text layout.</td></tr><tr><td>[options.font]</td><td><code>string</code> | <code>null</code></td><td><code>null</code></td><td>The font family used for the text content.</td></tr><tr><td>[options.textAlign]</td><td><code>&quot;start&quot;</code> | <code>&quot;end&quot;</code> | <code>&quot;left&quot;</code> | <code>&quot;right&quot;</code> | <code>&quot;center&quot;</code> | <code>null</code></td><td><code></code></td><td>The horizontal alignment of the text content.</td></tr><tr><td>[options.textBaseline]</td><td><code>&quot;top&quot;</code> | <code>&quot;hanging&quot;</code> | <code>&quot;middle&quot;</code> | <code>&quot;alphabetic&quot;</code> | <code>&quot;ideographic&quot;</code> | <code>&quot;bottom&quot;</code> | <code>null</code></td><td><code></code></td><td>The vertical alignment of the text content.</td></tr><tr><td>[options.direction]</td><td><code>&quot;ltr&quot;</code> | <code>&quot;rtl&quot;</code> | <code>&quot;inherit&quot;</code> | <code>null</code></td><td><code></code></td><td>The direction of the text content.</td></tr></tbody></table><p><a name="drawContext2D"></a></p><h2 id="drawcontext2d-ctx-transform-material-⇒-void" tabindex="-1">drawContext2D(ctx, transform, material) ⇒ <code>void</code> <a class="header-anchor" href="#drawcontext2d-ctx-transform-material-⇒-void" aria-label="Permalink to &quot;drawContext2D(ctx, transform, material) ⇒ &lt;code&gt;void&lt;/code&gt;&quot;">​</a></h2><p>Draws the text onto the given canvas 2D context</p><p><strong>Kind</strong>: global function</p><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>ctx</td><td><code>CanvasRenderingContext2D</code></td><td>The canvas rendering context to draw onto</td></tr><tr><td>transform</td><td><code>Transform</code></td><td>The transform to apply to the text</td></tr><tr><td>material</td><td><code>Material</code></td><td>The material to use for rendering the text</td></tr></tbody></table>',21)])])}const u=e(a,[["render",n]]);export{h as __pageData,u as default};
