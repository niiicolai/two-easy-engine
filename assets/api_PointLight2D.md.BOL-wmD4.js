import{_ as o,c as e,o as i,ae as d}from"./chunks/framework.C4y2S-A3.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"api/PointLight2D.md","filePath":"api/PointLight2D.md"}'),n={name:"api/PointLight2D.md"};function r(a,t,h,l,c,s){return i(),e("div",null,[...t[0]||(t[0]=[d('<h2 id="classes" tabindex="-1">Classes <a class="header-anchor" href="#classes" aria-label="Permalink to &quot;Classes&quot;">​</a></h2><dl><dt><a href="#PointLight2D">PointLight2D</a> ⇐ <code>Object2D</code></dt><dd><p>A simple 2D light source for Canvas rendering.</p></dd></dl><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><dl><dt><a href="#drawContext2D">drawContext2D(ctx)</a> ⇒ <code>void</code></dt><dd><p>Renders the light effect on the given 2D rendering context.</p></dd></dl><p><a name="PointLight2D"></a></p><h2 id="pointlight2d-⇐-object2d" tabindex="-1">PointLight2D ⇐ <code>Object2D</code> <a class="header-anchor" href="#pointlight2d-⇐-object2d" aria-label="Permalink to &quot;PointLight2D ⇐ &lt;code&gt;Object2D&lt;/code&gt;&quot;">​</a></h2><p>A simple 2D light source for Canvas rendering.</p><p><strong>Kind</strong>: global class<br><strong>Extends</strong>: <code>Object2D</code></p><ul><li><a href="#PointLight2D">PointLight2D</a> ⇐ <code>Object2D</code><ul><li><a href="#PointLight2D+PointLight2D">.PointLight2D</a><ul><li><a href="#new_PointLight2D+PointLight2D_new">new exports.PointLight2D(radius, intensity, color, colorStop)</a></li></ul></li></ul></li></ul><p><a name="PointLight2D+PointLight2D"></a></p><h3 id="pointlight2d-pointlight2d" tabindex="-1">pointLight2D.PointLight2D <a class="header-anchor" href="#pointlight2d-pointlight2d" aria-label="Permalink to &quot;pointLight2D.PointLight2D&quot;">​</a></h3><p><strong>Kind</strong>: instance class of <a href="#PointLight2D"><code>PointLight2D</code></a><br><a name="new_PointLight2D+PointLight2D_new"></a></p><h4 id="new-exports-pointlight2d-radius-intensity-color-colorstop" tabindex="-1">new exports.PointLight2D(radius, intensity, color, colorStop) <a class="header-anchor" href="#new-exports-pointlight2d-radius-intensity-color-colorstop" aria-label="Permalink to &quot;new exports.PointLight2D(radius, intensity, color, colorStop)&quot;">​</a></h4><p><strong>Throws</strong>:</p><ul><li><code>Error</code> If the radius is not a positive number.</li><li><code>Error</code> If the intensity is not a positive number.</li><li><code>Error</code> If the color is not a Color.</li><li><code>Error</code> If the colorStop is not a Color.</li></ul><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>radius</td><td><code>number</code></td><td><code>100</code></td><td>The radius of the light</td></tr><tr><td>intensity</td><td><code>number</code></td><td><code>1</code></td><td>The intensity of the light</td></tr><tr><td>color</td><td><code>Color</code></td><td></td><td>The color of the light</td></tr><tr><td>colorStop</td><td><code>Color</code></td><td></td><td>The colorStop of the light</td></tr></tbody></table><p><a name="drawContext2D"></a></p><h2 id="drawcontext2d-ctx-⇒-void" tabindex="-1">drawContext2D(ctx) ⇒ <code>void</code> <a class="header-anchor" href="#drawcontext2d-ctx-⇒-void" aria-label="Permalink to &quot;drawContext2D(ctx) ⇒ &lt;code&gt;void&lt;/code&gt;&quot;">​</a></h2><p>Renders the light effect on the given 2D rendering context.</p><p><strong>Kind</strong>: global function<br><strong>Throws</strong>:</p><ul><li><code>Error</code> If ctx is not of type CanvasRenderingContext2D</li></ul><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>ctx</td><td><code>CanvasRenderingContext2D</code></td><td>The 2D rendering context.</td></tr></tbody></table>',22)])])}const D=o(n,[["render",r]]);export{p as __pageData,D as default};
