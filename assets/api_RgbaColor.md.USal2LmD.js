import{_ as e,c as o,o as r,ae as a}from"./chunks/framework.Cn4FPLDc.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"api/RgbaColor.md","filePath":"api/RgbaColor.md"}'),d={name:"api/RgbaColor.md"};function n(l,t,i,s,b,c){return r(),o("div",null,[...t[0]||(t[0]=[a('<h2 id="classes" tabindex="-1">Classes <a class="header-anchor" href="#classes" aria-label="Permalink to &quot;Classes&quot;">​</a></h2><dl><dt><a href="#RgbaColor">RgbaColor</a> ⇐ <code>Color</code></dt><dd><p>A color defined by red, green, blue, and alpha</p></dd></dl><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><dl><dt><a href="#set">set(r, g, b, a)</a></dt><dd><p>Set the rgba color</p></dd><dt><a href="#updateColorStr">updateColorStr()</a> ⇒ <code>void</code></dt><dd><p>update the colorStr property based on the rgba props.</p></dd><dt><a href="#setRed">setRed(r)</a> ⇒ <code>void</code></dt><dd><p>Set red</p></dd><dt><a href="#setGreen">setGreen(g)</a> ⇒ <code>void</code></dt><dd><p>Set green</p></dd><dt><a href="#setBlue">setBlue(b)</a> ⇒ <code>void</code></dt><dd><p>Set blue</p></dd><dt><a href="#setAlpha">setAlpha(a)</a> ⇒ <code>void</code></dt><dd><p>Set the alpha</p></dd><dt><a href="#toRgbaString">toRgbaString()</a> ⇒ <code>string</code></dt><dd><p>Returns a string representation of the color in rgba format</p></dd><dt><a href="#toRgbString">toRgbString()</a> ⇒ <code>string</code></dt><dd><p>Returns a string representation of the color in rgb format</p></dd></dl><p><a name="RgbaColor"></a></p><h2 id="rgbacolor-⇐-color" tabindex="-1">RgbaColor ⇐ <code>Color</code> <a class="header-anchor" href="#rgbacolor-⇐-color" aria-label="Permalink to &quot;RgbaColor ⇐ &lt;code&gt;Color&lt;/code&gt;&quot;">​</a></h2><p>A color defined by red, green, blue, and alpha</p><p><strong>Kind</strong>: global class<br><strong>Extends</strong>: <code>Color</code></p><ul><li><a href="#RgbaColor">RgbaColor</a> ⇐ <code>Color</code><ul><li><a href="#RgbaColor+RgbaColor">.RgbaColor</a><ul><li><a href="#new_RgbaColor+RgbaColor_new">new exports.RgbaColor(r, g, b, a)</a></li></ul></li></ul></li></ul><p><a name="RgbaColor+RgbaColor"></a></p><h3 id="rgbacolor-rgbacolor" tabindex="-1">rgbaColor.RgbaColor <a class="header-anchor" href="#rgbacolor-rgbacolor" aria-label="Permalink to &quot;rgbaColor.RgbaColor&quot;">​</a></h3><p><strong>Kind</strong>: instance class of <a href="#RgbaColor"><code>RgbaColor</code></a><br><a name="new_RgbaColor+RgbaColor_new"></a></p><h4 id="new-exports-rgbacolor-r-g-b-a" tabindex="-1">new exports.RgbaColor(r, g, b, a) <a class="header-anchor" href="#new-exports-rgbacolor-r-g-b-a" aria-label="Permalink to &quot;new exports.RgbaColor(r, g, b, a)&quot;">​</a></h4><p><strong>Throws</strong>:</p><ul><li><code>Error</code> if r, g, or b is not between 0 and 255</li><li><code>Error</code> if a is not between 0 and 1</li></ul><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>r</td><td><code>number</code></td><td></td><td>red (0-255)</td></tr><tr><td>g</td><td><code>number</code></td><td></td><td>green (0-255)</td></tr><tr><td>b</td><td><code>number</code></td><td></td><td>blue (0-255)</td></tr><tr><td>a</td><td><code>number</code></td><td><code>1</code></td><td>alpha (0-1)</td></tr></tbody></table><p><a name="set"></a></p><h2 id="set-r-g-b-a" tabindex="-1">set(r, g, b, a) <a class="header-anchor" href="#set-r-g-b-a" aria-label="Permalink to &quot;set(r, g, b, a)&quot;">​</a></h2><p>Set the rgba color</p><p><strong>Kind</strong>: global function<br><strong>Throws</strong>:</p><ul><li><code>Error</code> if r, g, or b is not between 0 and 255</li><li><code>Error</code> if a is not between 0 and 1</li></ul><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>r</td><td><code>number</code></td><td>red (0-255)</td></tr><tr><td>g</td><td><code>number</code></td><td>green (0-255)</td></tr><tr><td>b</td><td><code>number</code></td><td>blue (0-255)</td></tr><tr><td>a</td><td><code>number</code></td><td>alpha (0-1)</td></tr></tbody></table><p><a name="updateColorStr"></a></p><h2 id="updatecolorstr-⇒-void" tabindex="-1">updateColorStr() ⇒ <code>void</code> <a class="header-anchor" href="#updatecolorstr-⇒-void" aria-label="Permalink to &quot;updateColorStr() ⇒ &lt;code&gt;void&lt;/code&gt;&quot;">​</a></h2><p>update the colorStr property based on the rgba props.</p><p><strong>Kind</strong>: global function<br><a name="setRed"></a></p><h2 id="setred-r-⇒-void" tabindex="-1">setRed(r) ⇒ <code>void</code> <a class="header-anchor" href="#setred-r-⇒-void" aria-label="Permalink to &quot;setRed(r) ⇒ &lt;code&gt;void&lt;/code&gt;&quot;">​</a></h2><p>Set red</p><p><strong>Kind</strong>: global function<br><strong>Throws</strong>:</p><ul><li><code>Error</code> if r is not between 0 and 255</li></ul><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>r</td><td><code>number</code></td><td>red (0-255)</td></tr></tbody></table><p><a name="setGreen"></a></p><h2 id="setgreen-g-⇒-void" tabindex="-1">setGreen(g) ⇒ <code>void</code> <a class="header-anchor" href="#setgreen-g-⇒-void" aria-label="Permalink to &quot;setGreen(g) ⇒ &lt;code&gt;void&lt;/code&gt;&quot;">​</a></h2><p>Set green</p><p><strong>Kind</strong>: global function<br><strong>Throws</strong>:</p><ul><li><code>Error</code> if g is not between 0 and 255</li></ul><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>g</td><td><code>number</code></td><td>green (0-255)</td></tr></tbody></table><p><a name="setBlue"></a></p><h2 id="setblue-b-⇒-void" tabindex="-1">setBlue(b) ⇒ <code>void</code> <a class="header-anchor" href="#setblue-b-⇒-void" aria-label="Permalink to &quot;setBlue(b) ⇒ &lt;code&gt;void&lt;/code&gt;&quot;">​</a></h2><p>Set blue</p><p><strong>Kind</strong>: global function<br><strong>Throws</strong>:</p><ul><li><code>Error</code> if b is not between 0 and 255</li></ul><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>b</td><td><code>number</code></td><td>blue (0-255)</td></tr></tbody></table><p><a name="setAlpha"></a></p><h2 id="setalpha-a-⇒-void" tabindex="-1">setAlpha(a) ⇒ <code>void</code> <a class="header-anchor" href="#setalpha-a-⇒-void" aria-label="Permalink to &quot;setAlpha(a) ⇒ &lt;code&gt;void&lt;/code&gt;&quot;">​</a></h2><p>Set the alpha</p><p><strong>Kind</strong>: global function<br><strong>Throws</strong>:</p><ul><li><code>Error</code> if a is not between 0 and 1</li></ul><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>a</td><td><code>number</code></td><td>alpha (0-1)</td></tr></tbody></table><p><a name="toRgbaString"></a></p><h2 id="torgbastring-⇒-string" tabindex="-1">toRgbaString() ⇒ <code>string</code> <a class="header-anchor" href="#torgbastring-⇒-string" aria-label="Permalink to &quot;toRgbaString() ⇒ &lt;code&gt;string&lt;/code&gt;&quot;">​</a></h2><p>Returns a string representation of the color in rgba format</p><p><strong>Kind</strong>: global function<br><a name="toRgbString"></a></p><h2 id="torgbstring-⇒-string" tabindex="-1">toRgbString() ⇒ <code>string</code> <a class="header-anchor" href="#torgbstring-⇒-string" aria-label="Permalink to &quot;toRgbString() ⇒ &lt;code&gt;string&lt;/code&gt;&quot;">​</a></h2><p>Returns a string representation of the color in rgb format</p><p><strong>Kind</strong>: global function</p>',56)])])}const p=e(d,[["render",n]]);export{h as __pageData,p as default};
