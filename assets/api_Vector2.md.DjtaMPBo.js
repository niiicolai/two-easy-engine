import{_ as e,c as o,o as r,ae as a}from"./chunks/framework.Cn4FPLDc.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"api/Vector2.md","filePath":"api/Vector2.md"}'),d={name:"api/Vector2.md"};function c(n,t,i,l,s,h){return r(),o("div",null,[...t[0]||(t[0]=[a('<h2 id="classes" tabindex="-1">Classes <a class="header-anchor" href="#classes" aria-label="Permalink to &quot;Classes&quot;">​</a></h2><dl><dt><a href="#Vector2">Vector2</a></dt><dd><p>This class provides basic vector operations such as addition, subtraction, scaling, and normalization.</p></dd></dl><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><dl><dt><a href="#clone">clone()</a> ⇒ <code><a href="#Vector2">Vector2</a></code></dt><dd><p>Creates a copy of the vector</p></dd><dt><a href="#set">set(x, y)</a> ⇒ <code>void</code></dt><dd><p>Sets the x and y values of the vector</p></dd><dt><a href="#translate">translate(x, y)</a> ⇒ <code>void</code></dt><dd><p>Translates the vector by given x and y offsets</p></dd><dt><a href="#add">add(v)</a> ⇒ <code>void</code></dt><dd><p>Adds another vector to this vector</p></dd><dt><a href="#subtract">subtract(v)</a> ⇒ <code>void</code></dt><dd><p>Subtracts another vector from this vector</p></dd><dt><a href="#dot">dot(v)</a> ⇒ <code>number</code></dt><dd><p>Computes the dot product with another vector</p></dd><dt><a href="#vectorTo">vectorTo(v)</a> ⇒ <code><a href="#Vector2">Vector2</a></code></dt><dd><p>Computes the vector from this vector to another vector</p></dd><dt><a href="#multiplyScalar">multiplyScalar(s)</a> ⇒ <code>void</code></dt><dd><p>Multiplies this vector by a scalar</p></dd><dt><a href="#divideScalar">divideScalar(s)</a> ⇒ <code>void</code></dt><dd><p>Divides this vector by a scalar</p></dd><dt><a href="#length">length()</a> ⇒ <code>number</code></dt><dd><p>Computes the length (magnitude) of the vector</p></dd><dt><a href="#normalize">normalize()</a> ⇒ <code>void</code></dt><dd><p>Normalizes the vector to have a length of 1</p></dd></dl><p><a name="Vector2"></a></p><h2 id="vector2" tabindex="-1">Vector2 <a class="header-anchor" href="#vector2" aria-label="Permalink to &quot;Vector2&quot;">​</a></h2><p>This class provides basic vector operations such as addition, subtraction, scaling, and normalization.</p><p><strong>Kind</strong>: global class</p><ul><li><a href="#Vector2">Vector2</a><ul><li><a href="#Vector2+Vector2">.Vector2</a><ul><li><a href="#new_Vector2+Vector2_new">new exports.Vector2(x, y)</a></li></ul></li></ul></li></ul><p><a name="Vector2+Vector2"></a></p><h3 id="vector2-vector2" tabindex="-1">vector2.Vector2 <a class="header-anchor" href="#vector2-vector2" aria-label="Permalink to &quot;vector2.Vector2&quot;">​</a></h3><p><strong>Kind</strong>: instance class of <a href="#Vector2"><code>Vector2</code></a><br><a name="new_Vector2+Vector2_new"></a></p><h4 id="new-exports-vector2-x-y" tabindex="-1">new exports.Vector2(x, y) <a class="header-anchor" href="#new-exports-vector2-x-y" aria-label="Permalink to &quot;new exports.Vector2(x, y)&quot;">​</a></h4><p><strong>Throws</strong>:</p><ul><li><code>Error</code> If x or y are not numbers.</li></ul><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>x</td><td><code>number</code></td><td><code>0</code></td><td>The x coordinate</td></tr><tr><td>y</td><td><code>number</code></td><td><code>0</code></td><td>The y coordinate</td></tr></tbody></table><p><a name="clone"></a></p><h2 id="clone-⇒-vector2" tabindex="-1">clone() ⇒ <a href="#Vector2"><code>Vector2</code></a> <a class="header-anchor" href="#clone-⇒-vector2" aria-label="Permalink to &quot;clone() ⇒ [&lt;code&gt;Vector2&lt;/code&gt;](#Vector2)&quot;">​</a></h2><p>Creates a copy of the vector</p><p><strong>Kind</strong>: global function<br><strong>Returns</strong>: <a href="#Vector2"><code>Vector2</code></a> - A new Vector2 instance with the same x and y values<br><a name="set"></a></p><h2 id="set-x-y-⇒-void" tabindex="-1">set(x, y) ⇒ <code>void</code> <a class="header-anchor" href="#set-x-y-⇒-void" aria-label="Permalink to &quot;set(x, y) ⇒ &lt;code&gt;void&lt;/code&gt;&quot;">​</a></h2><p>Sets the x and y values of the vector</p><p><strong>Kind</strong>: global function<br><strong>Throws</strong>:</p><ul><li><code>Error</code> If x or y is not a number</li></ul><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>x</td><td><code>number</code></td><td>The new x value</td></tr><tr><td>y</td><td><code>number</code></td><td>The new y value</td></tr></tbody></table><p><a name="translate"></a></p><h2 id="translate-x-y-⇒-void" tabindex="-1">translate(x, y) ⇒ <code>void</code> <a class="header-anchor" href="#translate-x-y-⇒-void" aria-label="Permalink to &quot;translate(x, y) ⇒ &lt;code&gt;void&lt;/code&gt;&quot;">​</a></h2><p>Translates the vector by given x and y offsets</p><p><strong>Kind</strong>: global function<br><strong>Throws</strong>:</p><ul><li><code>Error</code> If x or y is not a number</li></ul><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>x</td><td><code>number</code></td><td>The x offset</td></tr><tr><td>y</td><td><code>number</code></td><td>The y offset</td></tr></tbody></table><p><a name="add"></a></p><h2 id="add-v-⇒-void" tabindex="-1">add(v) ⇒ <code>void</code> <a class="header-anchor" href="#add-v-⇒-void" aria-label="Permalink to &quot;add(v) ⇒ &lt;code&gt;void&lt;/code&gt;&quot;">​</a></h2><p>Adds another vector to this vector</p><p><strong>Kind</strong>: global function<br><strong>Throws</strong>:</p><ul><li><code>Error</code> If v is not of type Vector2</li></ul><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>v</td><td><a href="#Vector2"><code>Vector2</code></a></td><td>The vector to add</td></tr></tbody></table><p><a name="subtract"></a></p><h2 id="subtract-v-⇒-void" tabindex="-1">subtract(v) ⇒ <code>void</code> <a class="header-anchor" href="#subtract-v-⇒-void" aria-label="Permalink to &quot;subtract(v) ⇒ &lt;code&gt;void&lt;/code&gt;&quot;">​</a></h2><p>Subtracts another vector from this vector</p><p><strong>Kind</strong>: global function<br><strong>Throws</strong>:</p><ul><li><code>Error</code> If v is not of type Vector2</li></ul><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>v</td><td><a href="#Vector2"><code>Vector2</code></a></td><td>The vector to subtract</td></tr></tbody></table><p><a name="dot"></a></p><h2 id="dot-v-⇒-number" tabindex="-1">dot(v) ⇒ <code>number</code> <a class="header-anchor" href="#dot-v-⇒-number" aria-label="Permalink to &quot;dot(v) ⇒ &lt;code&gt;number&lt;/code&gt;&quot;">​</a></h2><p>Computes the dot product with another vector</p><p><strong>Kind</strong>: global function<br><strong>Returns</strong>: <code>number</code> - The dot product<br><strong>Throws</strong>:</p><ul><li><code>Error</code> If v is not of type Vector2</li></ul><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>v</td><td><a href="#Vector2"><code>Vector2</code></a></td><td>The other vector</td></tr></tbody></table><p><a name="vectorTo"></a></p><h2 id="vectorto-v-⇒-vector2" tabindex="-1">vectorTo(v) ⇒ <a href="#Vector2"><code>Vector2</code></a> <a class="header-anchor" href="#vectorto-v-⇒-vector2" aria-label="Permalink to &quot;vectorTo(v) ⇒ [&lt;code&gt;Vector2&lt;/code&gt;](#Vector2)&quot;">​</a></h2><p>Computes the vector from this vector to another vector</p><p><strong>Kind</strong>: global function<br><strong>Returns</strong>: <a href="#Vector2"><code>Vector2</code></a> - A new Vector2 representing the vector from this to v<br><strong>Throws</strong>:</p><ul><li><code>Error</code> If v is not of type Vector2</li></ul><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>v</td><td><a href="#Vector2"><code>Vector2</code></a></td><td>The target vector</td></tr></tbody></table><p><a name="multiplyScalar"></a></p><h2 id="multiplyscalar-s-⇒-void" tabindex="-1">multiplyScalar(s) ⇒ <code>void</code> <a class="header-anchor" href="#multiplyscalar-s-⇒-void" aria-label="Permalink to &quot;multiplyScalar(s) ⇒ &lt;code&gt;void&lt;/code&gt;&quot;">​</a></h2><p>Multiplies this vector by a scalar</p><p><strong>Kind</strong>: global function<br><strong>Throws</strong>:</p><ul><li><code>Error</code> If s is not a number</li></ul><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>s</td><td><code>number</code></td><td>The scalar to multiply by</td></tr></tbody></table><p><a name="divideScalar"></a></p><h2 id="dividescalar-s-⇒-void" tabindex="-1">divideScalar(s) ⇒ <code>void</code> <a class="header-anchor" href="#dividescalar-s-⇒-void" aria-label="Permalink to &quot;divideScalar(s) ⇒ &lt;code&gt;void&lt;/code&gt;&quot;">​</a></h2><p>Divides this vector by a scalar</p><p><strong>Kind</strong>: global function<br><strong>Throws</strong>:</p><ul><li><code>Error</code> If s is not a number</li><li><code>Error</code> If division by zero is attempted</li></ul><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>s</td><td><code>number</code></td><td>The scalar to divide by</td></tr></tbody></table><p><a name="length"></a></p><h2 id="length-⇒-number" tabindex="-1">length() ⇒ <code>number</code> <a class="header-anchor" href="#length-⇒-number" aria-label="Permalink to &quot;length() ⇒ &lt;code&gt;number&lt;/code&gt;&quot;">​</a></h2><p>Computes the length (magnitude) of the vector</p><p><strong>Kind</strong>: global function<br><strong>Returns</strong>: <code>number</code> - The length of the vector<br><a name="normalize"></a></p><h2 id="normalize-⇒-void" tabindex="-1">normalize() ⇒ <code>void</code> <a class="header-anchor" href="#normalize-⇒-void" aria-label="Permalink to &quot;normalize() ⇒ &lt;code&gt;void&lt;/code&gt;&quot;">​</a></h2><p>Normalizes the vector to have a length of 1</p><p><strong>Kind</strong>: global function<br><strong>Throws</strong>:</p><ul><li><code>Error</code> If attempting to normalize a zero-length vector</li></ul>',75)])])}const u=e(d,[["render",c]]);export{b as __pageData,u as default};
