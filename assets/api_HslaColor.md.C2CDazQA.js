import{_ as o,c as e,o as a,ae as d}from"./chunks/framework.C4y2S-A3.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"api/HslaColor.md","filePath":"api/HslaColor.md"}'),r={name:"api/HslaColor.md"};function l(s,t,n,i,h,c){return a(),e("div",null,[...t[0]||(t[0]=[d('<h2 id="classes" tabindex="-1">Classes <a class="header-anchor" href="#classes" aria-label="Permalink to &quot;Classes&quot;">​</a></h2><dl><dt><a href="#HslaColor">HslaColor</a> ⇐ <code>Color</code></dt><dd><p>A color defined by hue, saturation, lightness, and alpha</p></dd></dl><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><dl><dt><a href="#set">set(h, s, l, a)</a> ⇒ <code>void</code></dt><dd><p>Set the hsla color</p></dd><dt><a href="#updateColorStr">updateColorStr()</a> ⇒ <code>void</code></dt><dd><p>update the colorStr property based on the rgba props.</p></dd><dt><a href="#setHue">setHue(h)</a> ⇒ <code>void</code></dt><dd><p>Set hue</p></dd><dt><a href="#setSaturation">setSaturation(s)</a> ⇒ <code>void</code></dt><dd><p>Set saturation</p></dd><dt><a href="#setLightness">setLightness(l)</a> ⇒ <code>void</code></dt><dd><p>Set saturation</p></dd><dt><a href="#setAlpha">setAlpha(alpha)</a> ⇒ <code>void</code></dt><dd><p>Set the alpha value</p></dd><dt><a href="#toHslaString">toHslaString()</a> ⇒ <code>string</code></dt><dd><p>Returns a string representation of the color in hsla format</p></dd><dt><a href="#toHslString">toHslString()</a> ⇒ <code>string</code></dt><dd><p>Returns a string representation of the color in hsl format</p></dd></dl><p><a name="HslaColor"></a></p><h2 id="hslacolor-⇐-color" tabindex="-1">HslaColor ⇐ <code>Color</code> <a class="header-anchor" href="#hslacolor-⇐-color" aria-label="Permalink to &quot;HslaColor ⇐ &lt;code&gt;Color&lt;/code&gt;&quot;">​</a></h2><p>A color defined by hue, saturation, lightness, and alpha</p><p><strong>Kind</strong>: global class<br><strong>Extends</strong>: <code>Color</code></p><ul><li><a href="#HslaColor">HslaColor</a> ⇐ <code>Color</code><ul><li><a href="#HslaColor+HslaColor">.HslaColor</a><ul><li><a href="#new_HslaColor+HslaColor_new">new exports.HslaColor(h, s, l, a)</a></li></ul></li></ul></li></ul><p><a name="HslaColor+HslaColor"></a></p><h3 id="hslacolor-hslacolor" tabindex="-1">hslaColor.HslaColor <a class="header-anchor" href="#hslacolor-hslacolor" aria-label="Permalink to &quot;hslaColor.HslaColor&quot;">​</a></h3><p><strong>Kind</strong>: instance class of <a href="#HslaColor"><code>HslaColor</code></a><br><a name="new_HslaColor+HslaColor_new"></a></p><h4 id="new-exports-hslacolor-h-s-l-a" tabindex="-1">new exports.HslaColor(h, s, l, a) <a class="header-anchor" href="#new-exports-hslacolor-h-s-l-a" aria-label="Permalink to &quot;new exports.HslaColor(h, s, l, a)&quot;">​</a></h4><p><strong>Throws</strong>:</p><ul><li><code>Error</code> if h, s, or l are out of range</li><li><code>Error</code> if a is not between 0 and 1</li></ul><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>h</td><td><code>number</code></td><td></td><td>hue (0-360)</td></tr><tr><td>s</td><td><code>number</code></td><td></td><td>saturation (0-100)</td></tr><tr><td>l</td><td><code>number</code></td><td></td><td>lightness (0-100)</td></tr><tr><td>a</td><td><code>number</code></td><td><code>1</code></td><td>alpha (0-1)</td></tr></tbody></table><p><a name="set"></a></p><h2 id="set-h-s-l-a-⇒-void" tabindex="-1">set(h, s, l, a) ⇒ <code>void</code> <a class="header-anchor" href="#set-h-s-l-a-⇒-void" aria-label="Permalink to &quot;set(h, s, l, a) ⇒ &lt;code&gt;void&lt;/code&gt;&quot;">​</a></h2><p>Set the hsla color</p><p><strong>Kind</strong>: global function<br><strong>Throws</strong>:</p><ul><li><code>Error</code> if h, s, or l are out of range</li><li><code>Error</code> if a is not between 0 and 1</li></ul><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>h</td><td><code>number</code></td><td>hue (0-360)</td></tr><tr><td>s</td><td><code>number</code></td><td>saturation (0-100)</td></tr><tr><td>l</td><td><code>number</code></td><td>lightness (0-100)</td></tr><tr><td>a</td><td><code>number</code></td><td>alpha (0-1)</td></tr></tbody></table><p><a name="updateColorStr"></a></p><h2 id="updatecolorstr-⇒-void" tabindex="-1">updateColorStr() ⇒ <code>void</code> <a class="header-anchor" href="#updatecolorstr-⇒-void" aria-label="Permalink to &quot;updateColorStr() ⇒ &lt;code&gt;void&lt;/code&gt;&quot;">​</a></h2><p>update the colorStr property based on the rgba props.</p><p><strong>Kind</strong>: global function<br><a name="setHue"></a></p><h2 id="sethue-h-⇒-void" tabindex="-1">setHue(h) ⇒ <code>void</code> <a class="header-anchor" href="#sethue-h-⇒-void" aria-label="Permalink to &quot;setHue(h) ⇒ &lt;code&gt;void&lt;/code&gt;&quot;">​</a></h2><p>Set hue</p><p><strong>Kind</strong>: global function<br><strong>Throws</strong>:</p><ul><li><code>Error</code> if h is not between 0 and 360</li></ul><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>h</td><td><code>number</code></td><td>hue (0-360)</td></tr></tbody></table><p><a name="setSaturation"></a></p><h2 id="setsaturation-s-⇒-void" tabindex="-1">setSaturation(s) ⇒ <code>void</code> <a class="header-anchor" href="#setsaturation-s-⇒-void" aria-label="Permalink to &quot;setSaturation(s) ⇒ &lt;code&gt;void&lt;/code&gt;&quot;">​</a></h2><p>Set saturation</p><p><strong>Kind</strong>: global function<br><strong>Throws</strong>:</p><ul><li><code>Error</code> if s is not between 0 and 100</li></ul><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>s</td><td><code>number</code></td><td>saturation (0-100)</td></tr></tbody></table><p><a name="setLightness"></a></p><h2 id="setlightness-l-⇒-void" tabindex="-1">setLightness(l) ⇒ <code>void</code> <a class="header-anchor" href="#setlightness-l-⇒-void" aria-label="Permalink to &quot;setLightness(l) ⇒ &lt;code&gt;void&lt;/code&gt;&quot;">​</a></h2><p>Set saturation</p><p><strong>Kind</strong>: global function<br><strong>Throws</strong>:</p><ul><li><code>Error</code> if l is not between 0 and 100</li></ul><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>l</td><td><code>number</code></td><td>lightness (0-100)</td></tr></tbody></table><p><a name="setAlpha"></a></p><h2 id="setalpha-alpha-⇒-void" tabindex="-1">setAlpha(alpha) ⇒ <code>void</code> <a class="header-anchor" href="#setalpha-alpha-⇒-void" aria-label="Permalink to &quot;setAlpha(alpha) ⇒ &lt;code&gt;void&lt;/code&gt;&quot;">​</a></h2><p>Set the alpha value</p><p><strong>Kind</strong>: global function<br><strong>Throws</strong>:</p><ul><li><code>Error</code> if alpha is not between 0 and 1</li></ul><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>alpha</td><td><code>number</code></td><td>alpha (0-1)</td></tr></tbody></table><p><a name="toHslaString"></a></p><h2 id="tohslastring-⇒-string" tabindex="-1">toHslaString() ⇒ <code>string</code> <a class="header-anchor" href="#tohslastring-⇒-string" aria-label="Permalink to &quot;toHslaString() ⇒ &lt;code&gt;string&lt;/code&gt;&quot;">​</a></h2><p>Returns a string representation of the color in hsla format</p><p><strong>Kind</strong>: global function<br><a name="toHslString"></a></p><h2 id="tohslstring-⇒-string" tabindex="-1">toHslString() ⇒ <code>string</code> <a class="header-anchor" href="#tohslstring-⇒-string" aria-label="Permalink to &quot;toHslString() ⇒ &lt;code&gt;string&lt;/code&gt;&quot;">​</a></h2><p>Returns a string representation of the color in hsl format</p><p><strong>Kind</strong>: global function</p>',56)])])}const g=o(r,[["render",l]]);export{u as __pageData,g as default};
