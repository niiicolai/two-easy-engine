import{_ as e,c as a,o as r,ae as o}from"./chunks/framework.Cn4FPLDc.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"api/Geometry.md","filePath":"api/Geometry.md"}'),d={name:"api/Geometry.md"};function s(n,t,i,l,c,m){return r(),a("div",null,[...t[0]||(t[0]=[o('<h2 id="classes" tabindex="-1">Classes <a class="header-anchor" href="#classes" aria-label="Permalink to &quot;Classes&quot;">​</a></h2><dl><dt><a href="#Geometry">Geometry</a></dt><dd><p>This class serves as a base for all geometric shapes, providing a draw method.</p></dd></dl><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><dl><dt><a href="#draw">draw(ctx, transform, material)</a> ⇒ <code>void</code></dt><dd><p>Draws the geometry onto the given canvas context</p></dd></dl><p><a name="Geometry"></a></p><h2 id="geometry" tabindex="-1">Geometry <a class="header-anchor" href="#geometry" aria-label="Permalink to &quot;Geometry&quot;">​</a></h2><p>This class serves as a base for all geometric shapes, providing a draw method.</p><p><strong>Kind</strong>: global class<br><a name="draw"></a></p><h2 id="draw-ctx-transform-material-⇒-void" tabindex="-1">draw(ctx, transform, material) ⇒ <code>void</code> <a class="header-anchor" href="#draw-ctx-transform-material-⇒-void" aria-label="Permalink to &quot;draw(ctx, transform, material) ⇒ &lt;code&gt;void&lt;/code&gt;&quot;">​</a></h2><p>Draws the geometry onto the given canvas context</p><p><strong>Kind</strong>: global function<br><strong>Throws</strong>:</p><ul><li><code>Error</code> If ctx is not of type CanvasRenderingContext2D</li><li><code>Error</code> If material is not of type Material</li><li><code>Error</code> If transform is not of type Transform</li><li><code>Error</code> If not implemented in subclass</li></ul><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>ctx</td><td><code>CanvasRenderingContext2D</code></td><td>The canvas rendering context to draw onto</td></tr><tr><td>transform</td><td><code>Transform</code></td><td>The transform to apply to the geometry</td></tr><tr><td>material</td><td><code>Material</code></td><td>The material to use for rendering the geometry</td></tr></tbody></table>',13)])])}const f=e(d,[["render",s]]);export{p as __pageData,f as default};
