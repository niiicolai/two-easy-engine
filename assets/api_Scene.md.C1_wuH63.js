import{_ as t,c as d,o,ae as a}from"./chunks/framework.Cn4FPLDc.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"api/Scene.md","filePath":"api/Scene.md"}'),r={name:"api/Scene.md"};function n(c,e,i,s,h,l){return o(),d("div",null,[...e[0]||(e[0]=[a('<h2 id="classes" tabindex="-1">Classes <a class="header-anchor" href="#classes" aria-label="Permalink to &quot;Classes&quot;">​</a></h2><dl><dt><a href="#Scene">Scene</a></dt><dd><p>This class manages a list of 2D objects and provides methods to add, remove, and render them.</p></dd></dl><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><dl><dt><a href="#add">add(child)</a> ⇒ <code>void</code></dt><dd><p>Adds a 2D object to the scene</p></dd><dt><a href="#remove">remove(child)</a> ⇒ <code>void</code></dt><dd><p>Removes a 2D object from the scene</p></dd><dt><a href="#sortChildrenByZIndex">sortChildrenByZIndex()</a> ⇒ <code>void</code></dt><dd><p>Sorts the children based on their zIndex property</p></dd><dt><a href="#render">render(ctx)</a> ⇒ <code>void</code></dt><dd><p>Renders all 2D objects in the scene onto the given canvas context</p></dd></dl><p><a name="Scene"></a></p><h2 id="scene" tabindex="-1">Scene <a class="header-anchor" href="#scene" aria-label="Permalink to &quot;Scene&quot;">​</a></h2><p>This class manages a list of 2D objects and provides methods to add, remove, and render them.</p><p><strong>Kind</strong>: global class<br><a name="add"></a></p><h2 id="add-child-⇒-void" tabindex="-1">add(child) ⇒ <code>void</code> <a class="header-anchor" href="#add-child-⇒-void" aria-label="Permalink to &quot;add(child) ⇒ &lt;code&gt;void&lt;/code&gt;&quot;">​</a></h2><p>Adds a 2D object to the scene</p><p><strong>Kind</strong>: global function<br><strong>Throws</strong>:</p><ul><li><code>Error</code> If child is not of type Object2D</li></ul><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>child</td><td><code>Object2D</code></td><td>The 2D object to add to the scene</td></tr></tbody></table><p><a name="remove"></a></p><h2 id="remove-child-⇒-void" tabindex="-1">remove(child) ⇒ <code>void</code> <a class="header-anchor" href="#remove-child-⇒-void" aria-label="Permalink to &quot;remove(child) ⇒ &lt;code&gt;void&lt;/code&gt;&quot;">​</a></h2><p>Removes a 2D object from the scene</p><p><strong>Kind</strong>: global function<br><strong>Throws</strong>:</p><ul><li><code>Error</code> If child is not of type Object2D</li></ul><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>child</td><td><code>Object2D</code></td><td>The 2D object to remove from the scene</td></tr></tbody></table><p><a name="sortChildrenByZIndex"></a></p><h2 id="sortchildrenbyzindex-⇒-void" tabindex="-1">sortChildrenByZIndex() ⇒ <code>void</code> <a class="header-anchor" href="#sortchildrenbyzindex-⇒-void" aria-label="Permalink to &quot;sortChildrenByZIndex() ⇒ &lt;code&gt;void&lt;/code&gt;&quot;">​</a></h2><p>Sorts the children based on their zIndex property</p><p><strong>Kind</strong>: global function<br><a name="render"></a></p><h2 id="render-ctx-⇒-void" tabindex="-1">render(ctx) ⇒ <code>void</code> <a class="header-anchor" href="#render-ctx-⇒-void" aria-label="Permalink to &quot;render(ctx) ⇒ &lt;code&gt;void&lt;/code&gt;&quot;">​</a></h2><p>Renders all 2D objects in the scene onto the given canvas context</p><p><strong>Kind</strong>: global function<br><strong>Throws</strong>:</p><ul><li><code>Error</code> If ctx is not of type CanvasRenderingContext2D</li></ul><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>ctx</td><td><code>CanvasRenderingContext2D</code></td><td>The canvas rendering context to render the scene onto</td></tr></tbody></table>',28)])])}const m=t(r,[["render",n]]);export{b as __pageData,m as default};
