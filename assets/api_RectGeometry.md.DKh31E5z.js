import{_ as t,c as r,o as a,ae as o}from"./chunks/framework.Cn4FPLDc.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"api/RectGeometry.md","filePath":"api/RectGeometry.md"}'),d={name:"api/RectGeometry.md"};function c(n,e,i,h,s,l){return a(),r("div",null,[...e[0]||(e[0]=[o('<h2 id="classes" tabindex="-1">Classes <a class="header-anchor" href="#classes" aria-label="Permalink to &quot;Classes&quot;">​</a></h2><dl><dt><a href="#RectGeometry">RectGeometry</a> ⇐ <code>Geometry</code></dt><dd><p>This class provides a rectangle shape with width and height properties.</p></dd></dl><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><dl><dt><a href="#draw">draw(ctx, transform, material)</a> ⇒ <code>void</code></dt><dd><p>Draws the rectangle onto the given canvas context</p></dd></dl><p><a name="RectGeometry"></a></p><h2 id="rectgeometry-⇐-geometry" tabindex="-1">RectGeometry ⇐ <code>Geometry</code> <a class="header-anchor" href="#rectgeometry-⇐-geometry" aria-label="Permalink to &quot;RectGeometry ⇐ &lt;code&gt;Geometry&lt;/code&gt;&quot;">​</a></h2><p>This class provides a rectangle shape with width and height properties.</p><p><strong>Kind</strong>: global class<br><strong>Extends</strong>: <code>Geometry</code></p><ul><li><a href="#RectGeometry">RectGeometry</a> ⇐ <code>Geometry</code><ul><li><a href="#RectGeometry+RectGeometry">.RectGeometry</a><ul><li><a href="#new_RectGeometry+RectGeometry_new">new exports.RectGeometry(width, height)</a></li></ul></li></ul></li></ul><p><a name="RectGeometry+RectGeometry"></a></p><h3 id="rectgeometry-rectgeometry" tabindex="-1">rectGeometry.RectGeometry <a class="header-anchor" href="#rectgeometry-rectgeometry" aria-label="Permalink to &quot;rectGeometry.RectGeometry&quot;">​</a></h3><p><strong>Kind</strong>: instance class of <a href="#RectGeometry"><code>RectGeometry</code></a><br><a name="new_RectGeometry+RectGeometry_new"></a></p><h4 id="new-exports-rectgeometry-width-height" tabindex="-1">new exports.RectGeometry(width, height) <a class="header-anchor" href="#new-exports-rectgeometry-width-height" aria-label="Permalink to &quot;new exports.RectGeometry(width, height)&quot;">​</a></h4><p><strong>Throws</strong>:</p><ul><li><code>Error</code> If the width is not a positive number.</li><li><code>Error</code> If the height is not a positive number.</li></ul><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>width</td><td><code>number</code></td><td>The width of the rectangle (must be positive).</td></tr><tr><td>height</td><td><code>number</code></td><td>The height of the rectangle (must be positive).</td></tr></tbody></table><p><a name="draw"></a></p><h2 id="draw-ctx-transform-material-⇒-void" tabindex="-1">draw(ctx, transform, material) ⇒ <code>void</code> <a class="header-anchor" href="#draw-ctx-transform-material-⇒-void" aria-label="Permalink to &quot;draw(ctx, transform, material) ⇒ &lt;code&gt;void&lt;/code&gt;&quot;">​</a></h2><p>Draws the rectangle onto the given canvas context</p><p><strong>Kind</strong>: global function</p><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>ctx</td><td><code>CanvasRenderingContext2D</code></td><td>The canvas rendering context to draw onto</td></tr><tr><td>transform</td><td><code>Transform</code></td><td>The transform to apply to the rectangle</td></tr><tr><td>material</td><td><code>Material</code></td><td>The material to use for rendering the rectangle</td></tr></tbody></table>',21)])])}const y=t(d,[["render",c]]);export{p as __pageData,y as default};
