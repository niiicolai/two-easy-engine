import{_ as t,c as d,o,ae as a}from"./chunks/framework.Cn4FPLDc.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"api/Render2D.md","filePath":"api/Render2D.md"}'),r={name:"api/Render2D.md"};function n(i,e,c,s,l,h){return o(),d("div",null,[...e[0]||(e[0]=[a('<h2 id="classes" tabindex="-1">Classes <a class="header-anchor" href="#classes" aria-label="Permalink to &quot;Classes&quot;">​</a></h2><dl><dt><a href="#Render2D">Render2D</a></dt><dd><p>This class handles the rendering process, including setting up the canvas and drawing the scene using the camera.</p></dd></dl><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><dl><dt><a href="#setBackgroundColor">setBackgroundColor(backgroundColor)</a> ⇒ <code>void</code></dt><dd><p>Sets the background color</p></dd><dt><a href="#setSize">setSize(width, height)</a> ⇒ <code>void</code></dt><dd><p>Sets the size of the canvas</p></dd><dt><a href="#setDevicePixelRatio">setDevicePixelRatio(dpr)</a> ⇒ <code>void</code></dt><dd><p>Sets the device pixel ratio for the canvas</p></dd><dt><a href="#recalculateDevicePixelRatio">recalculateDevicePixelRatio()</a> ⇒ <code>void</code></dt><dd><p>Recalculates the canvas size based on the device pixel ratio</p></dd><dt><a href="#render">render()</a> ⇒ <code>void</code></dt><dd><p>Renders the scene onto the canvas using the camera</p></dd><dt><a href="#requestAnimationFrame">requestAnimationFrame(options)</a> ⇒ <code>void</code></dt><dd><p>A helper method that simplifies the use of requestAnimationFrame</p></dd></dl><p><a name="Render2D"></a></p><h2 id="render2d" tabindex="-1">Render2D <a class="header-anchor" href="#render2d" aria-label="Permalink to &quot;Render2D&quot;">​</a></h2><p>This class handles the rendering process, including setting up the canvas and drawing the scene using the camera.</p><p><strong>Kind</strong>: global class</p><ul><li><a href="#Render2D">Render2D</a><ul><li><a href="#Render2D+Render2D">.Render2D</a><ul><li><a href="#new_Render2D+Render2D_new">new exports.Render2D(canvas, scene, camera, [options])</a></li></ul></li></ul></li></ul><p><a name="Render2D+Render2D"></a></p><h3 id="render2d-render2d" tabindex="-1">render2D.Render2D <a class="header-anchor" href="#render2d-render2d" aria-label="Permalink to &quot;render2D.Render2D&quot;">​</a></h3><p><strong>Kind</strong>: instance class of <a href="#Render2D"><code>Render2D</code></a><br><a name="new_Render2D+Render2D_new"></a></p><h4 id="new-exports-render2d-canvas-scene-camera-options" tabindex="-1">new exports.Render2D(canvas, scene, camera, [options]) <a class="header-anchor" href="#new-exports-render2d-canvas-scene-camera-options" aria-label="Permalink to &quot;new exports.Render2D(canvas, scene, camera, [options])&quot;">​</a></h4><p><strong>Throws</strong>:</p><ul><li><code>Error</code> If canvas is not of type HTMLCanvasElement</li><li><code>Error</code> If scene is not of type Scene</li><li><code>Error</code> If camera is not of type Camera2D</li><li><code>Error</code> If options.width or options.height is not a number</li><li><code>Error</code> If options.devicePixelRatio is not a number</li><li><code>Error</code> If options.backgroundColor is not a string or Color</li></ul><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>canvas</td><td><code>HTMLCanvasElement</code></td><td></td><td>The canvas element</td></tr><tr><td>scene</td><td><code>Scene</code></td><td></td><td>The scene</td></tr><tr><td>camera</td><td><code>Camera2D</code></td><td></td><td>The camera</td></tr><tr><td>[options]</td><td><code>Object</code></td><td></td><td>Render configuration options.</td></tr><tr><td>[options.width]</td><td><code>number</code></td><td><code>window.innerWidth</code></td><td>Initial canvas width</td></tr><tr><td>[options.height]</td><td><code>number</code></td><td><code>window.innerHeight</code></td><td>Initial canvas height</td></tr><tr><td>[options.devicePixelRatio]</td><td><code>number</code></td><td><code>window.devicePixelRatio</code></td><td>Initial device pixel ratio</td></tr><tr><td>[options.backgroundColor]</td><td><code>string</code> | <code>Color</code></td><td><code>&quot;&#39;transparent&#39;&quot;</code></td><td>Initial background color</td></tr></tbody></table><p><a name="setBackgroundColor"></a></p><h2 id="setbackgroundcolor-backgroundcolor-⇒-void" tabindex="-1">setBackgroundColor(backgroundColor) ⇒ <code>void</code> <a class="header-anchor" href="#setbackgroundcolor-backgroundcolor-⇒-void" aria-label="Permalink to &quot;setBackgroundColor(backgroundColor) ⇒ &lt;code&gt;void&lt;/code&gt;&quot;">​</a></h2><p>Sets the background color</p><p><strong>Kind</strong>: global function<br><strong>Throws</strong>:</p><ul><li><code>Error</code> If backgroundColor is not a string or Color</li></ul><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>backgroundColor</td><td><code>string</code> | <code>Color</code></td><td>The color</td></tr></tbody></table><p><a name="setSize"></a></p><h2 id="setsize-width-height-⇒-void" tabindex="-1">setSize(width, height) ⇒ <code>void</code> <a class="header-anchor" href="#setsize-width-height-⇒-void" aria-label="Permalink to &quot;setSize(width, height) ⇒ &lt;code&gt;void&lt;/code&gt;&quot;">​</a></h2><p>Sets the size of the canvas</p><p><strong>Kind</strong>: global function<br><strong>Throws</strong>:</p><ul><li><code>Error</code> If width or height is not a number</li></ul><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>width</td><td><code>number</code></td><td>The width of the canvas</td></tr><tr><td>height</td><td><code>number</code></td><td>The height of the canvas</td></tr></tbody></table><p><a name="setDevicePixelRatio"></a></p><h2 id="setdevicepixelratio-dpr-⇒-void" tabindex="-1">setDevicePixelRatio(dpr) ⇒ <code>void</code> <a class="header-anchor" href="#setdevicepixelratio-dpr-⇒-void" aria-label="Permalink to &quot;setDevicePixelRatio(dpr) ⇒ &lt;code&gt;void&lt;/code&gt;&quot;">​</a></h2><p>Sets the device pixel ratio for the canvas</p><p><strong>Kind</strong>: global function<br><strong>Throws</strong>:</p><ul><li><code>Error</code> If dpr is not a number</li></ul><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>dpr</td><td><code>number</code></td><td>The device pixel ratio</td></tr></tbody></table><p><a name="recalculateDevicePixelRatio"></a></p><h2 id="recalculatedevicepixelratio-⇒-void" tabindex="-1">recalculateDevicePixelRatio() ⇒ <code>void</code> <a class="header-anchor" href="#recalculatedevicepixelratio-⇒-void" aria-label="Permalink to &quot;recalculateDevicePixelRatio() ⇒ &lt;code&gt;void&lt;/code&gt;&quot;">​</a></h2><p>Recalculates the canvas size based on the device pixel ratio</p><p><strong>Kind</strong>: global function<br><a name="render"></a></p><h2 id="render-⇒-void" tabindex="-1">render() ⇒ <code>void</code> <a class="header-anchor" href="#render-⇒-void" aria-label="Permalink to &quot;render() ⇒ &lt;code&gt;void&lt;/code&gt;&quot;">​</a></h2><p>Renders the scene onto the canvas using the camera</p><p><strong>Kind</strong>: global function<br><a name="requestAnimationFrame"></a></p><h2 id="requestanimationframe-options-⇒-void" tabindex="-1">requestAnimationFrame(options) ⇒ <code>void</code> <a class="header-anchor" href="#requestanimationframe-options-⇒-void" aria-label="Permalink to &quot;requestAnimationFrame(options) ⇒ &lt;code&gt;void&lt;/code&gt;&quot;">​</a></h2><p>A helper method that simplifies the use of requestAnimationFrame</p><p><strong>Kind</strong>: global function<br><strong>Throws</strong>:</p><ul><li><code>Error</code> If options.beforeRender is not a function</li><li><code>Error</code> If options.afterRender is not a function</li></ul><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>options</td><td><code>Object</code></td><td>Options for beforeRender and afterRender callbacks</td></tr><tr><td>options.beforeRender</td><td><code>function</code></td><td>A callback function to be called before each render</td></tr><tr><td>options.afterRender</td><td><code>function</code></td><td>A callback function to be called after each render</td></tr></tbody></table>',46)])])}const b=t(r,[["render",n]]);export{u as __pageData,b as default};
