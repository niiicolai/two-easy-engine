import{_ as t,c as a,o as d,ae as o}from"./chunks/framework.Cn4FPLDc.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"api/Texture2D.md","filePath":"api/Texture2D.md"}'),r={name:"api/Texture2D.md"};function i(n,e,s,c,l,g){return d(),a("div",null,[...e[0]||(e[0]=[o('<h2 id="classes" tabindex="-1">Classes <a class="header-anchor" href="#classes" aria-label="Permalink to &quot;Classes&quot;">​</a></h2><dl><dt><a href="#Texture2D">Texture2D</a></dt><dd><p>Represents a pattern used for drawing an image on geometries.</p></dd></dl><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><dl><dt><a href="#createPattern">createPattern(ctx)</a> ⇒ <code>CanvasPattern</code> | <code>null</code></dt><dd><p>Create the pattern based on the image and configuration</p></dd><dt><a href="#rebuildTransform">rebuildTransform()</a> ⇒ <code>void</code></dt><dd><p>Position and scale the pattern&#39;s transform</p></dd><dt><a href="#setImageOffset">setImageOffset([imageOffsetX], [imageOffsetY])</a> ⇒ <code>void</code></dt><dd><p>Set the image&#39;s offset</p></dd><dt><a href="#setImageSize">setImageSize([imageWidth], [imageHeight])</a> ⇒ <code>void</code></dt><dd><p>Set the image&#39;s width and height</p></dd><dt><a href="#setImage">setImage(image, [repeat])</a> ⇒ <code>void</code></dt><dd><p>Loads and sets an image.</p></dd></dl><p><a name="Texture2D"></a></p><h2 id="texture2d" tabindex="-1">Texture2D <a class="header-anchor" href="#texture2d" aria-label="Permalink to &quot;Texture2D&quot;">​</a></h2><p>Represents a pattern used for drawing an image on geometries.</p><p><strong>Kind</strong>: global class</p><ul><li><a href="#Texture2D">Texture2D</a><ul><li><a href="#Texture2D+Texture2D">.Texture2D</a><ul><li><a href="#new_Texture2D+Texture2D_new">new exports.Texture2D([options])</a></li></ul></li></ul></li></ul><p><a name="Texture2D+Texture2D"></a></p><h3 id="texture2d-texture2d" tabindex="-1">texture2D.Texture2D <a class="header-anchor" href="#texture2d-texture2d" aria-label="Permalink to &quot;texture2D.Texture2D&quot;">​</a></h3><p><strong>Kind</strong>: instance class of <a href="#Texture2D"><code>Texture2D</code></a><br><a name="new_Texture2D+Texture2D_new"></a></p><h4 id="new-exports-texture2d-options" tabindex="-1">new exports.Texture2D([options]) <a class="header-anchor" href="#new-exports-texture2d-options" aria-label="Permalink to &quot;new exports.Texture2D([options])&quot;">​</a></h4><p><strong>Throws</strong>:</p><ul><li><code>Error</code> If the image is not a string or HTMLImageElement.</li><li><code>Error</code> If the imageRepeat is not a string or valid type.</li><li><code>Error</code> If the imageOffsetX is not a number.</li><li><code>Error</code> If the imageWidth is not null or a number.</li><li><code>Error</code> If the imageHeight is not null or a number.</li></ul><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>[options]</td><td><code>Object</code></td><td></td><td>Texture2D configuration options.</td></tr><tr><td>[options.image]</td><td><code>HTMLImageElement</code> | <code>string</code></td><td></td><td>Image or image URL for texture</td></tr><tr><td>[options.imageRepeat]</td><td><code>&quot;repeat&quot;</code> | <code>&quot;repeat-x&quot;</code> | <code>&quot;repeat-y&quot;</code> | <code>&quot;no-repeat&quot;</code></td><td><code>&quot;repeat&quot;</code></td><td>Pattern repeat mode</td></tr><tr><td>[options.imageOffsetX]</td><td><code>number</code></td><td><code>0</code></td><td>image offset x</td></tr><tr><td>[options.imageOffsetY]</td><td><code>number</code></td><td><code>0</code></td><td>image offset y</td></tr><tr><td>[options.imageWidth]</td><td><code>number</code> | <code>null</code></td><td><code></code></td><td>image width</td></tr><tr><td>[options.imageHeight]</td><td><code>number</code> | <code>null</code></td><td><code></code></td><td>image height</td></tr></tbody></table><p><a name="createPattern"></a></p><h2 id="createpattern-ctx-⇒-canvaspattern-null" tabindex="-1">createPattern(ctx) ⇒ <code>CanvasPattern</code> | <code>null</code> <a class="header-anchor" href="#createpattern-ctx-⇒-canvaspattern-null" aria-label="Permalink to &quot;createPattern(ctx) ⇒ &lt;code&gt;CanvasPattern&lt;/code&gt; \\| &lt;code&gt;null&lt;/code&gt;&quot;">​</a></h2><p>Create the pattern based on the image and configuration</p><p><strong>Kind</strong>: global function<br><strong>Throws</strong>:</p><ul><li><code>Error</code> If the ctx is not of type CanvasRenderingContext2D.</li></ul><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>ctx</td><td><code>CanvasRenderingContext2D</code></td><td>The canvas rendering context to draw onto</td></tr></tbody></table><p><a name="rebuildTransform"></a></p><h2 id="rebuildtransform-⇒-void" tabindex="-1">rebuildTransform() ⇒ <code>void</code> <a class="header-anchor" href="#rebuildtransform-⇒-void" aria-label="Permalink to &quot;rebuildTransform() ⇒ &lt;code&gt;void&lt;/code&gt;&quot;">​</a></h2><p>Position and scale the pattern&#39;s transform</p><p><strong>Kind</strong>: global function<br><a name="setImageOffset"></a></p><h2 id="setimageoffset-imageoffsetx-imageoffsety-⇒-void" tabindex="-1">setImageOffset([imageOffsetX], [imageOffsetY]) ⇒ <code>void</code> <a class="header-anchor" href="#setimageoffset-imageoffsetx-imageoffsety-⇒-void" aria-label="Permalink to &quot;setImageOffset([imageOffsetX], [imageOffsetY]) ⇒ &lt;code&gt;void&lt;/code&gt;&quot;">​</a></h2><p>Set the image&#39;s offset</p><p><strong>Kind</strong>: global function<br><strong>Throws</strong>:</p><ul><li><code>Error</code> If the imageOffsetX is not a number.</li><li><code>Error</code> If the imageOffsetY is not a number.</li></ul><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>[imageOffsetX]</td><td><code>number</code></td><td>image offset x</td></tr><tr><td>[imageOffsetY]</td><td><code>number</code></td><td>image offset y</td></tr></tbody></table><p><a name="setImageSize"></a></p><h2 id="setimagesize-imagewidth-imageheight-⇒-void" tabindex="-1">setImageSize([imageWidth], [imageHeight]) ⇒ <code>void</code> <a class="header-anchor" href="#setimagesize-imagewidth-imageheight-⇒-void" aria-label="Permalink to &quot;setImageSize([imageWidth], [imageHeight]) ⇒ &lt;code&gt;void&lt;/code&gt;&quot;">​</a></h2><p>Set the image&#39;s width and height</p><p><strong>Kind</strong>: global function<br><strong>Throws</strong>:</p><ul><li><code>Error</code> If the imageWidth is not null or a number.</li><li><code>Error</code> If the imageHeight is not null or a number.</li></ul><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>[imageWidth]</td><td><code>number</code> | <code>null</code></td><td>image width</td></tr><tr><td>[imageHeight]</td><td><code>number</code> | <code>null</code></td><td>image height</td></tr></tbody></table><p><a name="setImage"></a></p><h2 id="setimage-image-repeat-⇒-void" tabindex="-1">setImage(image, [repeat]) ⇒ <code>void</code> <a class="header-anchor" href="#setimage-image-repeat-⇒-void" aria-label="Permalink to &quot;setImage(image, [repeat]) ⇒ &lt;code&gt;void&lt;/code&gt;&quot;">​</a></h2><p>Loads and sets an image.</p><p><strong>Kind</strong>: global function<br><strong>Throws</strong>:</p><ul><li><code>Error</code> If the image is not a string or HTMLImageElement.</li><li><code>Error</code> If the imageRepeat is not a string or valid type.</li></ul><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>image</td><td><code>HTMLImageElement</code> | <code>string</code></td><td></td><td>An <img> element or a URL string</td></tr><tr><td>[repeat]</td><td><code>&quot;repeat&quot;</code> | <code>&quot;repeat-x&quot;</code> | <code>&quot;repeat-y&quot;</code> | <code>&quot;no-repeat&quot;</code></td><td><code>&quot;repeat&quot;</code></td><td>Pattern repeat mode</td></tr></tbody></table>',43)])])}const u=t(r,[["render",i]]);export{m as __pageData,u as default};
