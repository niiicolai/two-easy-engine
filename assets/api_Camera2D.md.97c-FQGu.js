import{_ as t,c as e,o,ae as r}from"./chunks/framework.Cn4FPLDc.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"api/Camera2D.md","filePath":"api/Camera2D.md"}'),n={name:"api/Camera2D.md"};function d(i,a,s,c,l,p){return o(),e("div",null,[...a[0]||(a[0]=[r('<h2 id="classes" tabindex="-1">Classes <a class="header-anchor" href="#classes" aria-label="Permalink to &quot;Classes&quot;">​</a></h2><dl><dt><a href="#Camera2D">Camera2D</a></dt><dd><p>This class provides functionality to control the view of the scene, including position, rotation, and zoom.</p></dd></dl><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><dl><dt><a href="#apply">apply(ctx)</a> ⇒ <code>void</code></dt><dd><p>Applies the camera transformation to the given canvas context</p></dd><dt><a href="#restore">restore(ctx)</a> ⇒ <code>void</code></dt><dd><p>Restores the canvas context to its state before the camera transformation was applied</p></dd></dl><p><a name="Camera2D"></a></p><h2 id="camera2d" tabindex="-1">Camera2D <a class="header-anchor" href="#camera2d" aria-label="Permalink to &quot;Camera2D&quot;">​</a></h2><p>This class provides functionality to control the view of the scene, including position, rotation, and zoom.</p><p><strong>Kind</strong>: global class</p><ul><li><a href="#Camera2D">Camera2D</a><ul><li><a href="#Camera2D+Camera2D">.Camera2D</a><ul><li><a href="#new_Camera2D+Camera2D_new">new exports.Camera2D([options])</a></li></ul></li></ul></li></ul><p><a name="Camera2D+Camera2D"></a></p><h3 id="camera2d-camera2d" tabindex="-1">camera2D.Camera2D <a class="header-anchor" href="#camera2d-camera2d" aria-label="Permalink to &quot;camera2D.Camera2D&quot;">​</a></h3><p><strong>Kind</strong>: instance class of <a href="#Camera2D"><code>Camera2D</code></a><br><a name="new_Camera2D+Camera2D_new"></a></p><h4 id="new-exports-camera2d-options" tabindex="-1">new exports.Camera2D([options]) <a class="header-anchor" href="#new-exports-camera2d-options" aria-label="Permalink to &quot;new exports.Camera2D([options])&quot;">​</a></h4><p>Create a new Camera2D instance.</p><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>[options]</td><td><code>Object</code></td><td></td><td>Camera configuration options.</td></tr><tr><td>[options.zoom]</td><td><code>number</code></td><td><code>1</code></td><td>Initial zoom level of the camera.</td></tr></tbody></table><p><a name="apply"></a></p><h2 id="apply-ctx-⇒-void" tabindex="-1">apply(ctx) ⇒ <code>void</code> <a class="header-anchor" href="#apply-ctx-⇒-void" aria-label="Permalink to &quot;apply(ctx) ⇒ &lt;code&gt;void&lt;/code&gt;&quot;">​</a></h2><p>Applies the camera transformation to the given canvas context</p><p><strong>Kind</strong>: global function<br><strong>Throws</strong>:</p><ul><li><code>Error</code> If ctx is not of type CanvasRenderingContext2D</li></ul><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>ctx</td><td><code>CanvasRenderingContext2D</code></td><td>The canvas rendering context to apply the transformation to</td></tr></tbody></table><p><a name="restore"></a></p><h2 id="restore-ctx-⇒-void" tabindex="-1">restore(ctx) ⇒ <code>void</code> <a class="header-anchor" href="#restore-ctx-⇒-void" aria-label="Permalink to &quot;restore(ctx) ⇒ &lt;code&gt;void&lt;/code&gt;&quot;">​</a></h2><p>Restores the canvas context to its state before the camera transformation was applied</p><p><strong>Kind</strong>: global function</p><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>ctx</td><td><code>CanvasRenderingContext2D</code></td><td>The canvas rendering context to restore</td></tr></tbody></table>',26)])])}const f=t(n,[["render",d]]);export{m as __pageData,f as default};
