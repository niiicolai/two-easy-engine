import{_ as a,c as o,o as i,j as e,a as t}from"./chunks/framework.C4y2S-A3.js";const u=JSON.parse('{"title":"Integration","description":"","frontmatter":{},"headers":[],"relativePath":"mcp/mcp_integration.md","filePath":"mcp/mcp_integration.md"}'),r={name:"mcp/mcp_integration.md"};function s(c,n,l,d,p,g){return i(),o("div",null,[...n[0]||(n[0]=[e("h1",{id:"integration",tabindex:"-1"},[t("Integration "),e("a",{class:"header-anchor",href:"#integration","aria-label":'Permalink to "Integration"'},"â€‹")],-1),e("p",null,"TwoEasyEngine can be used to create HTML canvas drawings directly within your MCP server. By integrating it as a tool, you can leverage the full capabilities of 2D graphics: animations, shapes, text, and images; while responding to commands from your MCP clients. This allows for dynamic visual content generation on the server side, which can then be sent to clients as images.",-1),e("p",null,"The integration process involves setting up TwoEasyEngine to work in a Node.js environment, including configuring global canvas types and creating canvas instances using the canvas library. Once set up, you can register a drawing tool with your MCP server.",-1),e("p",null,[t("For more information about MCP, its concepts, and getting started with your own server, visit the official MCP documentation: "),e("a",{href:"https://modelcontextprotocol.io/docs/getting-started/intro",target:"_blank",rel:"noreferrer"},"modelcontextprotocol.io/docs/getting-started/intro"),t(".")],-1),e("p",null,"The next page will demonstrate how to add TwoEasyEngine as a tool to an MCP server and introduce a sample project server, which is available on GitHub. This example provides a working setup that you can explore, modify, and extend for your own projects.",-1)])])}const h=a(r,[["render",s]]);export{u as __pageData,h as default};
