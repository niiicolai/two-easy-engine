import{_ as a,c as e,o as i,ae as l}from"./chunks/framework.Cn4FPLDc.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"api/BasicMaterial.md","filePath":"api/BasicMaterial.md"}'),r={name:"api/BasicMaterial.md"};function o(d,t,s,n,c,p){return i(),e("div",null,[...t[0]||(t[0]=[l('<h2 id="classes" tabindex="-1">Classes <a class="header-anchor" href="#classes" aria-label="Permalink to &quot;Classes&quot;">​</a></h2><dl><dt><a href="#BasicMaterial">BasicMaterial</a> ⇐ <code>Material</code></dt><dd><p>A basic material that implements fillStyle, strokeStyle and lineWidth</p></dd></dl><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><dl><dt><a href="#apply">apply(ctx)</a> ⇒ <code>void</code></dt><dd><p>Apply the draw style to the given ctx</p></dd></dl><p><a name="BasicMaterial"></a></p><h2 id="basicmaterial-⇐-material" tabindex="-1">BasicMaterial ⇐ <code>Material</code> <a class="header-anchor" href="#basicmaterial-⇐-material" aria-label="Permalink to &quot;BasicMaterial ⇐ &lt;code&gt;Material&lt;/code&gt;&quot;">​</a></h2><p>A basic material that implements fillStyle, strokeStyle and lineWidth</p><p><strong>Kind</strong>: global class<br><strong>Extends</strong>: <code>Material</code></p><ul><li><a href="#BasicMaterial">BasicMaterial</a> ⇐ <code>Material</code><ul><li><a href="#BasicMaterial+BasicMaterial">.BasicMaterial</a><ul><li><a href="#new_BasicMaterial+BasicMaterial_new">new exports.BasicMaterial([options])</a></li></ul></li></ul></li></ul><p><a name="BasicMaterial+BasicMaterial"></a></p><h3 id="basicmaterial-basicmaterial" tabindex="-1">basicMaterial.BasicMaterial <a class="header-anchor" href="#basicmaterial-basicmaterial" aria-label="Permalink to &quot;basicMaterial.BasicMaterial&quot;">​</a></h3><p><strong>Kind</strong>: instance class of <a href="#BasicMaterial"><code>BasicMaterial</code></a><br><a name="new_BasicMaterial+BasicMaterial_new"></a></p><h4 id="new-exports-basicmaterial-options" tabindex="-1">new exports.BasicMaterial([options]) <a class="header-anchor" href="#new-exports-basicmaterial-options" aria-label="Permalink to &quot;new exports.BasicMaterial([options])&quot;">​</a></h4><p><strong>Throws</strong>:</p><ul><li><code>Error</code> If the fillStyle is not null or a string.</li><li><code>Error</code> If the strokeStyle is not null or a string.</li><li><code>Error</code> If the lineWidth is not null or a number.</li></ul><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>[options]</td><td><code>Object</code></td><td></td><td>Material configuration options.</td></tr><tr><td>[options.fillStyle]</td><td><code>string</code></td><td><code>null</code></td><td>Initial fill style</td></tr><tr><td>[options.strokeStyle]</td><td><code>string</code></td><td><code>null</code></td><td>Initial stroke style</td></tr><tr><td>[options.lineWidth]</td><td><code>number</code></td><td><code></code></td><td>Initial line width</td></tr></tbody></table><p><a name="apply"></a></p><h2 id="apply-ctx-⇒-void" tabindex="-1">apply(ctx) ⇒ <code>void</code> <a class="header-anchor" href="#apply-ctx-⇒-void" aria-label="Permalink to &quot;apply(ctx) ⇒ &lt;code&gt;void&lt;/code&gt;&quot;">​</a></h2><p>Apply the draw style to the given ctx</p><p><strong>Kind</strong>: global function<br><strong>Throws</strong>:</p><ul><li><code>Error</code> If ctx is not of type CanvasRenderingContext2D</li></ul><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>ctx</td><td><code>CanvasRenderingContext2D</code></td><td>The canvas rendering context to draw onto</td></tr></tbody></table>',22)])])}const u=a(r,[["render",o]]);export{b as __pageData,u as default};
