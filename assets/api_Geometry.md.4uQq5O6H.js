import{_ as t,c as a,o as r,ae as o}from"./chunks/framework.Cn4FPLDc.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"api/Geometry.md","filePath":"api/Geometry.md"}'),d={name:"api/Geometry.md"};function n(s,e,m,i,l,c){return r(),a("div",null,[...e[0]||(e[0]=[o('<h2 id="classes" tabindex="-1">Classes <a class="header-anchor" href="#classes" aria-label="Permalink to &quot;Classes&quot;">​</a></h2><dl><dt><a href="#Geometry">Geometry</a></dt><dd><p>This class serves as a base for all geometric shapes, providing a draw method.</p></dd></dl><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><dl><dt><a href="#drawContext2D">drawContext2D(ctx, transform, material)</a> ⇒ <code>void</code></dt><dd><p>Draws the mesh onto the given canvas 2D context</p></dd></dl><p><a name="Geometry"></a></p><h2 id="geometry" tabindex="-1">Geometry <a class="header-anchor" href="#geometry" aria-label="Permalink to &quot;Geometry&quot;">​</a></h2><p>This class serves as a base for all geometric shapes, providing a draw method.</p><p><strong>Kind</strong>: global class</p><ul><li><a href="#Geometry">Geometry</a><ul><li><a href="#Geometry+Geometry">.Geometry</a><ul><li><a href="#new_Geometry+Geometry_new">new exports.Geometry(name)</a></li></ul></li></ul></li></ul><p><a name="Geometry+Geometry"></a></p><h3 id="geometry-geometry" tabindex="-1">geometry.Geometry <a class="header-anchor" href="#geometry-geometry" aria-label="Permalink to &quot;geometry.Geometry&quot;">​</a></h3><p><strong>Kind</strong>: instance class of <a href="#Geometry"><code>Geometry</code></a><br><a name="new_Geometry+Geometry_new"></a></p><h4 id="new-exports-geometry-name" tabindex="-1">new exports.Geometry(name) <a class="header-anchor" href="#new-exports-geometry-name" aria-label="Permalink to &quot;new exports.Geometry(name)&quot;">​</a></h4><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>name</td><td><code>string</code></td><td>The name of the geometry</td></tr></tbody></table><p><a name="drawContext2D"></a></p><h2 id="drawcontext2d-ctx-transform-material-⇒-void" tabindex="-1">drawContext2D(ctx, transform, material) ⇒ <code>void</code> <a class="header-anchor" href="#drawcontext2d-ctx-transform-material-⇒-void" aria-label="Permalink to &quot;drawContext2D(ctx, transform, material) ⇒ &lt;code&gt;void&lt;/code&gt;&quot;">​</a></h2><p>Draws the mesh onto the given canvas 2D context</p><p><strong>Kind</strong>: global function</p><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>ctx</td><td><code>CanvasRenderingContext2D</code></td><td>The canvas 2D rendering context to draw onto</td></tr><tr><td>transform</td><td><code>Transform</code></td><td>The transform to apply to the rectangle</td></tr><tr><td>material</td><td><code>Material</code></td><td>The material to use for rendering the rectangle</td></tr></tbody></table>',19)])])}const y=t(d,[["render",n]]);export{p as __pageData,y as default};
