import{_ as t,c as r,o,ae as a}from"./chunks/framework.Cn4FPLDc.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"api/CircleGeometry.md","filePath":"api/CircleGeometry.md"}'),i={name:"api/CircleGeometry.md"};function c(d,e,l,n,s,m){return o(),r("div",null,[...e[0]||(e[0]=[a('<h2 id="classes" tabindex="-1">Classes <a class="header-anchor" href="#classes" aria-label="Permalink to &quot;Classes&quot;">​</a></h2><dl><dt><a href="#CircleGeometry">CircleGeometry</a> ⇐ <code>Geometry</code></dt><dd><p>This class provides a circle shape with a radius property.</p></dd></dl><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><dl><dt><a href="#drawContext2D">drawContext2D(ctx, transform, material)</a> ⇒ <code>void</code></dt><dd><p>Draws the circle onto the given canvas 2D context</p></dd></dl><p><a name="CircleGeometry"></a></p><h2 id="circlegeometry-⇐-geometry" tabindex="-1">CircleGeometry ⇐ <code>Geometry</code> <a class="header-anchor" href="#circlegeometry-⇐-geometry" aria-label="Permalink to &quot;CircleGeometry ⇐ &lt;code&gt;Geometry&lt;/code&gt;&quot;">​</a></h2><p>This class provides a circle shape with a radius property.</p><p><strong>Kind</strong>: global class<br><strong>Extends</strong>: <code>Geometry</code></p><ul><li><a href="#CircleGeometry">CircleGeometry</a> ⇐ <code>Geometry</code><ul><li><a href="#CircleGeometry+CircleGeometry">.CircleGeometry</a><ul><li><a href="#new_CircleGeometry+CircleGeometry_new">new exports.CircleGeometry(radius)</a></li></ul></li></ul></li></ul><p><a name="CircleGeometry+CircleGeometry"></a></p><h3 id="circlegeometry-circlegeometry" tabindex="-1">circleGeometry.CircleGeometry <a class="header-anchor" href="#circlegeometry-circlegeometry" aria-label="Permalink to &quot;circleGeometry.CircleGeometry&quot;">​</a></h3><p><strong>Kind</strong>: instance class of <a href="#CircleGeometry"><code>CircleGeometry</code></a><br><a name="new_CircleGeometry+CircleGeometry_new"></a></p><h4 id="new-exports-circlegeometry-radius" tabindex="-1">new exports.CircleGeometry(radius) <a class="header-anchor" href="#new-exports-circlegeometry-radius" aria-label="Permalink to &quot;new exports.CircleGeometry(radius)&quot;">​</a></h4><p><strong>Throws</strong>:</p><ul><li><code>Error</code> If the radius is not a positive number.</li></ul><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>radius</td><td><code>number</code></td><td>The radius of the circle (must be positive).</td></tr></tbody></table><p><a name="drawContext2D"></a></p><h2 id="drawcontext2d-ctx-transform-material-⇒-void" tabindex="-1">drawContext2D(ctx, transform, material) ⇒ <code>void</code> <a class="header-anchor" href="#drawcontext2d-ctx-transform-material-⇒-void" aria-label="Permalink to &quot;drawContext2D(ctx, transform, material) ⇒ &lt;code&gt;void&lt;/code&gt;&quot;">​</a></h2><p>Draws the circle onto the given canvas 2D context</p><p><strong>Kind</strong>: global function<br><strong>Throws</strong>:</p><ul><li><code>Error</code> if material is not of type Material</li><li><code>Error</code> if transform is not of type Transform</li></ul><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>ctx</td><td><code>CanvasRenderingContext2D</code></td><td>The canvas 2D rendering context to draw onto</td></tr><tr><td>transform</td><td><code>Transform</code></td><td>The transform to apply to the circle</td></tr><tr><td>material</td><td><code>Material</code></td><td>The material to use for rendering the circle</td></tr></tbody></table>',22)])])}const y=t(i,[["render",c]]);export{p as __pageData,y as default};
