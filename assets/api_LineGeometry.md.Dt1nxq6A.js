import{_ as t,c as r,o,ae as a}from"./chunks/framework.C4y2S-A3.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"api/LineGeometry.md","filePath":"api/LineGeometry.md"}'),n={name:"api/LineGeometry.md"};function i(d,e,s,l,c,m){return o(),r("div",null,[...e[0]||(e[0]=[a('<h2 id="classes" tabindex="-1">Classes <a class="header-anchor" href="#classes" aria-label="Permalink to &quot;Classes&quot;">​</a></h2><dl><dt><a href="#LineGeometry">LineGeometry</a> ⇐ <code>Geometry</code></dt><dd><p>This class provides a way to draw a custom shape using lines.</p></dd></dl><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><dl><dt><a href="#drawContext2D">drawContext2D(ctx, transform, material)</a> ⇒ <code>void</code></dt><dd><p>Draws the circle onto the given canvas 2D context</p></dd></dl><p><a name="LineGeometry"></a></p><h2 id="linegeometry-⇐-geometry" tabindex="-1">LineGeometry ⇐ <code>Geometry</code> <a class="header-anchor" href="#linegeometry-⇐-geometry" aria-label="Permalink to &quot;LineGeometry ⇐ &lt;code&gt;Geometry&lt;/code&gt;&quot;">​</a></h2><p>This class provides a way to draw a custom shape using lines.</p><p><strong>Kind</strong>: global class<br><strong>Extends</strong>: <code>Geometry</code></p><ul><li><a href="#LineGeometry">LineGeometry</a> ⇐ <code>Geometry</code><ul><li><a href="#LineGeometry+LineGeometry">.LineGeometry</a><ul><li><a href="#new_LineGeometry+LineGeometry_new">new exports.LineGeometry(points)</a></li></ul></li></ul></li></ul><p><a name="LineGeometry+LineGeometry"></a></p><h3 id="linegeometry-linegeometry" tabindex="-1">lineGeometry.LineGeometry <a class="header-anchor" href="#linegeometry-linegeometry" aria-label="Permalink to &quot;lineGeometry.LineGeometry&quot;">​</a></h3><p><strong>Kind</strong>: instance class of <a href="#LineGeometry"><code>LineGeometry</code></a><br><a name="new_LineGeometry+LineGeometry_new"></a></p><h4 id="new-exports-linegeometry-points" tabindex="-1">new exports.LineGeometry(points) <a class="header-anchor" href="#new-exports-linegeometry-points" aria-label="Permalink to &quot;new exports.LineGeometry(points)&quot;">​</a></h4><p><strong>Throws</strong>:</p><ul><li><code>Error</code> If points has less than one 4-number arrays</li><li><code>Error</code> If points has an array with less or more than four numbers</li></ul><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>points</td><td><code>Array.&lt;Array.&lt;number&gt;&gt;</code></td><td>Array of 4-number arrays describing points/segments. Requires at least one entry.</td></tr></tbody></table><p><a name="drawContext2D"></a></p><h2 id="drawcontext2d-ctx-transform-material-⇒-void" tabindex="-1">drawContext2D(ctx, transform, material) ⇒ <code>void</code> <a class="header-anchor" href="#drawcontext2d-ctx-transform-material-⇒-void" aria-label="Permalink to &quot;drawContext2D(ctx, transform, material) ⇒ &lt;code&gt;void&lt;/code&gt;&quot;">​</a></h2><p>Draws the circle onto the given canvas 2D context</p><p><strong>Kind</strong>: global function<br><strong>Throws</strong>:</p><ul><li><code>Error</code> if material is not of type Material</li><li><code>Error</code> if transform is not of type Transform</li></ul><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>ctx</td><td><code>CanvasRenderingContext2D</code></td><td>The canvas 2D rendering context to draw onto</td></tr><tr><td>transform</td><td><code>Transform</code></td><td>The transform to apply to the circle</td></tr><tr><td>material</td><td><code>Material</code></td><td>The material to use for rendering the circle</td></tr></tbody></table>',22)])])}const y=t(n,[["render",i]]);export{p as __pageData,y as default};
