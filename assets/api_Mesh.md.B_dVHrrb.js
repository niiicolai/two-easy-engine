import{_ as t,c as a,o,ae as r}from"./chunks/framework.Cn4FPLDc.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"api/Mesh.md","filePath":"api/Mesh.md"}'),d={name:"api/Mesh.md"};function s(n,e,h,c,i,l){return o(),a("div",null,[...e[0]||(e[0]=[r('<h2 id="classes" tabindex="-1">Classes <a class="header-anchor" href="#classes" aria-label="Permalink to &quot;Classes&quot;">​</a></h2><dl><dt><a href="#Mesh">Mesh</a> ⇐ <code>Object2D</code></dt><dd><p>This class combines geometry and material to create a drawable object.</p></dd></dl><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><dl><dt><a href="#drawContext2D">drawContext2D(ctx)</a> ⇒ <code>void</code></dt><dd><p>Draws the mesh onto the given canvas 2D context</p></dd></dl><p><a name="Mesh"></a></p><h2 id="mesh-⇐-object2d" tabindex="-1">Mesh ⇐ <code>Object2D</code> <a class="header-anchor" href="#mesh-⇐-object2d" aria-label="Permalink to &quot;Mesh ⇐ &lt;code&gt;Object2D&lt;/code&gt;&quot;">​</a></h2><p>This class combines geometry and material to create a drawable object.</p><p><strong>Kind</strong>: global class<br><strong>Extends</strong>: <code>Object2D</code></p><ul><li><a href="#Mesh">Mesh</a> ⇐ <code>Object2D</code><ul><li><a href="#Mesh+Mesh">.Mesh</a><ul><li><a href="#new_Mesh+Mesh_new">new exports.Mesh(geometry, material)</a></li></ul></li></ul></li></ul><p><a name="Mesh+Mesh"></a></p><h3 id="mesh-mesh" tabindex="-1">mesh.Mesh <a class="header-anchor" href="#mesh-mesh" aria-label="Permalink to &quot;mesh.Mesh&quot;">​</a></h3><p><strong>Kind</strong>: instance class of <a href="#Mesh"><code>Mesh</code></a><br><a name="new_Mesh+Mesh_new"></a></p><h4 id="new-exports-mesh-geometry-material" tabindex="-1">new exports.Mesh(geometry, material) <a class="header-anchor" href="#new-exports-mesh-geometry-material" aria-label="Permalink to &quot;new exports.Mesh(geometry, material)&quot;">​</a></h4><p><strong>Throws</strong>:</p><ul><li><code>Error</code> If geometry is not of type Geometry</li><li><code>Error</code> If material is not of type Material</li></ul><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>geometry</td><td><code>Geometry</code></td><td>The mesh&#39;s geometry</td></tr><tr><td>material</td><td><code>Material</code></td><td>The mesh&#39;s material</td></tr></tbody></table><p><a name="drawContext2D"></a></p><h2 id="drawcontext2d-ctx-⇒-void" tabindex="-1">drawContext2D(ctx) ⇒ <code>void</code> <a class="header-anchor" href="#drawcontext2d-ctx-⇒-void" aria-label="Permalink to &quot;drawContext2D(ctx) ⇒ &lt;code&gt;void&lt;/code&gt;&quot;">​</a></h2><p>Draws the mesh onto the given canvas 2D context</p><p><strong>Kind</strong>: global function</p><table tabindex="0"><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>ctx</td><td><code>CanvasRenderingContext2D</code></td><td>The canvas 2D rendering context to draw onto</td></tr></tbody></table>',21)])])}const b=t(d,[["render",s]]);export{p as __pageData,b as default};
